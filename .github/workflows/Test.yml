name: Run_Tests

on: 
  push:
  # pull_request:
  #   branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.config.os }} 
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: macos-10.15, name: macOS 10.15 clang 11 Debug,    cc: clang-11,  cxx: clang++-11,    build_type: Debug }
          - { os: macos-10.15, name: macOS 10.15 clang 11 Release,  cc: clang-11,  cxx: clang++-11,    build_type: Release } 

          - { os: macos-10.15, name: macOS 10.15 Apple Clang Debug,    cc: clang,  cxx: clang++,    build_type: Debug }
          - { os: macos-10.15, name: macOS 10.15 Apple Clang Release,  cc: clang,  cxx: clang++,    build_type: Release } 


          - { os: macos-11.0, name: macOS 11.0 clang 11 Debug,    cc: clang-11,  cxx: clang++-11,    build_type: Debug }
          - { os: macos-11.0, name: macOS 11.0 clang 11 Release,  cc: clang-11,  cxx: clang++-11,    build_type: Release } 

          - { os: macos-11.0, name: macOS 11.0 Apple Clang Debug,    cc: clang,  cxx: clang++,    build_type: Debug }
          - { os: macos-11.0, name: macOS 11.0 Apple Clang Release,  cc: clang,  cxx: clang++,    build_type: Release } 
          

    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        path: main

    - name: Checkout Catch
      uses: actions/checkout@v2
      with:
        repository: 'catchorg/Catch2'
        ref: 'v2.x'
        path: Catch2

    - name: Install Catch (*nix)
      if: matrix.config.os != 'windows-latest'
      run: |
        cd Catch2
        cmake -Bbuild -S. -DBUILD_TESTING=OFF
        sudo cmake --build build/ --target install

    - name: Install Catch (Windows)
      if: matrix.config.os == 'windows-latest'
      run: |
        cd Catch2
        cmake -Bbuild -S. -DBUILD_TESTING=OFF
        cmake --build build/ --target install
      

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake (Windows)
      working-directory: ${{runner.workspace}}/build
      if: matrix.config.os == 'windows-latest'
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake ${{runner.workspace}}/Units/main/tests -DCMAKE_BUILD_TYPE="${{ matrix.config.build-type }}"

    - name: Configure CMake (*nix)
      working-directory: ${{runner.workspace}}/build
      if: matrix.config.os != 'windows-latest'
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake ${{runner.workspace}}/Units/main/tests -DCMAKE_BUILD_TYPE="${{ matrix.config.build-type }}" -DCMAKE_CXX_COMPILER="${{ matrix.config.cxx }}"

    - name: Build
      working-directory: ${{runner.workspace}}/build
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config "${{ matrix.config.build-type }}"

    - name: Test (*nix)
      working-directory: ${{runner.workspace}}/build
      if: matrix.config.os != 'windows-latest'
      # Execute tests defined by the CMake configuration. 
      run: cmake --build . --config "${{ matrix.config.build-type }}" --target test

    - name: Test (Windows)
      working-directory: ${{runner.workspace}}/build
      if: matrix.config.os == 'windows-latest'
      # Execute tests defined by the CMake configuration. 
      run: cmake --build . --config "${{ matrix.config.build-type }}" --target RUN_TESTS