name: Run_Tests

on: 
  push:
  # pull_request:
  #   branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.os }} 
    strategy:
      matrix:
        cfg:
          - { os: ubuntu-20.04, name: Ubuntu 20 gcc 7 Debug,      cc: gcc-7.5,  cxx: g++-7.5,  build_type: Debug }
          - { os: ubuntu-20.04, name: Ubuntu 20 gcc 7 Release,    cc: gcc-7.5,  cxx: g++-7.5,  build_type: Release }
          - { os: ubuntu-20.04, name: Ubuntu 20 gcc 8 Debug,      cc: gcc-8.4,  cxx: g++-8.4,  build_type: Debug }
          - { os: ubuntu-20.04, name: Ubuntu 20 gcc 8 Release,    cc: gcc-8.4,  cxx: g++-8.4,  build_type: Release }
          - { os: ubuntu-20.04, name: Ubuntu 20 gcc 9 Debug,      cc: gcc-9.3,  cxx: g++-9.3,  build_type: Debug }
          - { os: ubuntu-20.04, name: Ubuntu 20 gcc 9 Release,    cc: gcc-9.3,  cxx: g++-9.3,  build_type: Release }
          - { os: ubuntu-20.04, name: Ubuntu 20 gcc 10 Debug,     cc: gcc-10.2, cxx: g++-10.2, build_type: Debug }
          - { os: ubuntu-20.04, name: Ubuntu 20 gcc 10 Release,   cc: gcc-10.2, cxx: g++-10.2, build_type: Release }
          - { os: ubuntu-20.04, name: Ubuntu 20 clang 8 Debug,    cc: clang-8,  cxx: g++-8,    build_type: Debug }
          - { os: ubuntu-20.04, name: Ubuntu 20 clang 8 Release,  cc: clang-8,  cxx: g++-8,    build_type: Release }
          - { os: ubuntu-20.04, name: Ubuntu 20 clang 9 Debug,    cc: clang-9,  cxx: g++-9,    build_type: Debug }
          - { os: ubuntu-20.04, name: Ubuntu 20 clang 9 Release,  cc: clang-9,  cxx: g++-9,    build_type: Release }
          - { os: ubuntu-20.04, name: Ubuntu 20 clang 10 Debug,   cc: clang-10, cxx: g++-10,   build_type: Debug }
          - { os: ubuntu-20.04, name: Ubuntu 20 clang 10 Release, cc: clang-10, cxx: g++-10,   build_type: Release }      

    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        path: main

    - name: Checkout Catch
      uses: actions/checkout@v2
      with:
        repository: 'catchorg/Catch2'
        ref: 'v2.x'
        path: Catch2

    - name: Install Catch (*nix)
      if: matrix.os != 'windows-latest'
      run: |
        cd Catch2
        cmake -Bbuild -S. -DBUILD_TESTING=OFF
        sudo cmake --build build/ --target install

    - name: Install Catch (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd Catch2
        cmake -Bbuild -S. -DBUILD_TESTING=OFF
        cmake --build build/ --target install
      

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake (Windows)
      working-directory: ${{runner.workspace}}/build
      if: matrix.os == 'windows-latest'
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake ${{runner.workspace}}/Units/main/tests -DCMAKE_BUILD_TYPE="${{ matrix.build-type }}"

    - name: Configure CMake (*nix)
      working-directory: ${{runner.workspace}}/build
      if: matrix.os != 'windows-latest'
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake ${{runner.workspace}}/Units/main/tests -DCMAKE_BUILD_TYPE="${{ matrix.build-type }}" -DCMAKE_CXX_COMPILER="${{ matrix.cxx }}"

    - name: Build
      working-directory: ${{runner.workspace}}/build
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config "${{ matrix.build-type }}"

    - name: Test (*nix)
      working-directory: ${{runner.workspace}}/build
      if: matrix.os != 'windows-latest'
      # Execute tests defined by the CMake configuration. 
      run: cmake --build . --config "${{ matrix.build-type }}" --target test

    - name: Test (Windows)
      working-directory: ${{runner.workspace}}/build
      if: matrix.os == 'windows-latest'
      # Execute tests defined by the CMake configuration. 
      run: cmake --build . --config "${{ matrix.build-type }}" --target RUN_TESTS